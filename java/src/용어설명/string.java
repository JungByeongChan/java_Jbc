package 용어설명;

public class string {
	/*string 클래스 : 문자열을 저장하는 클래스로 다양한 기능을 제공
	""를 이용하여 문자열을 관리
	문자열은 문자 0개 이상 가능
	참조 변수는 null을 이용하여 비어 있다는 것을 나타냄
	빈 문자열 => 화자일에 휴지가 있는데 휴지심만 있는 경우
	null => 화장실에 휴지가 없는 경우
	*/
	
	
	/* 변수 명명 규칙(필수)
	 * 1. 대소문자 구분 - num과 NUM은 다른 변수
	 * 2. 예약어 사용 불가 - int int; // 불가능
	 * 3. 숫자로 시작 안됨 - int 1num; // 불가능 
	 * 				int num //가능
	 * 4. 특수문자는 _와 &만 가능
	 * 5. 변수명 중복 선언 불가능 - int num;
	 * 							int num; // 위에서 이미 선언해서 불가능
	 */
	
	
	/* 변수 명명 관례(선택)
	 * 변수명의 첫 글자는 소문자로 시작
	 * 여러 단어로 된 경우 두번 째 단어부터 첫글자만 대문자로(카멜 표기법) - totalCount
	 * 상수는 대문자로 하며, 단어 구분을_로 함 - MAX_AGE
	 * 클래스 명의 첫 글자는 대문자로 시작
	 */
	
	/* 변수 - 하나의 값을 저장하는 공간
	 * 상수 - 값을 저장 후 수정할 수 없는 공간(한 번만 저장)
	 * 리터럴 - 그 자체로 값을 의미
	  
	  int score = 95;
	  	- score : 변수, 95 : 리터럴
	  
	  final int MAX_AGE = 100; // 앞에 final을 붙여서 상수로 만들 수 있음
	  							/ 선언과 동시에 반드시 초기화 하는 것이 좋다.
	  	  - MAX_AGE : 상수, 100 : 리터럴
	 */
	
	/* 지역 변수는 사용되기 전 반드시 초기화해야 함
	 	사용 : 변수의 값을 활용하는 경우
	 	지역 변수 = 메인에서 선언하는 변수들
	 */
	
	/* 문자열
	 * 문자열 + 기본형 => 문자열
	 * 기본형 + 문자열 => 문자열
	 * "abc" + 1 => "abc1"
	 * 1 + "abc" => "1abc"
	 * "abc" + 1 + 2 => "abc12"
	 	앞의 두 것을 더한 후 2를 더하게됨 ("abc" + 1) + 2로 인식
	 * 1 + 2 + "abc" => "3abc"
	 	- 1 + 2 를 번저 한 후 "abc"와 더함
	 */
	
	/* 오버플로우
	 *  정수 변수가 표현 할 수 있는 정수의 범위를 넘어서 의도했던 값과 다르게 나오는 현상으로 양수에서 음수로 될 때
	 byte num = 127;
	 b = b+1; // -128이 저장
	 
	 * 위 코드에서 b에는 -128이 저장
	 * byte는 저장 가능한 최대 정수 127에 1을 더하면 128이 아닌 -128이 됨(128은 byte로 표현이 불가능)
	 */
	
	/* 언더플로우
	  음수에서 양수로
	  byte num = -128;
	  b = b-1; // 127이 저장
	 * 위 코드에서 b에는 127이 저장
	 * byte는 저장 가능한 최소 정수 -128에 1을 빼면 127이 됨(-129는 byte로 표현이 불가능)
	 */

	/* 형변환
	 * 값을 내가 원하는 다른 자료형(변수타입)으로 변환하는 것
	 * boolean을 제외한 기본형은 변환 가능
	 * 자동 자료형 변환(묵시적)
	  - 알아서(신경쓰지않아도) 변환이 되는 경우
	 * 강제(명시적) 자료형 변환
	  - 자동으로 일어나지 않거나필요에 의해 강제로 변환해야 하는 경우
	 */

	/* 자동 자료형 형변환
	 * 정수를 실수로 변환하는 경우
	 * 문자를 정수로 변환하는 경우
	 * 바이트가 작은 자료형을 보다 큰 자료형으로 변하는 경우 자동 자료형 변환이 일어남
	 * 
	 byte num = 1;
	 int num2 = num1;
	 char ch = 'A';
	 num2 = ch;
	 double num3 = num2;
	 long num4 = 1;//1은 int
	 */

	/* 강제(명시적)자료형 변환
	 * 실수를 정수로 변화하는 경우
	 * 현재 자료형의 바이트보다 작은 바이트를 가진 자료형으로 변환하는 경우
	 * 자동 자료형 변환이 일어나지만 필요에 의한 경우 : 나누기 할 때
	 * 변환하고자 하는 변수/리터럴/상수 앞에 (변환하려는 자료형)을 써 줌
	 int num1 = (int)3.14; - 3만 저장이됨
	 int num2 = (int)123L;//접미사 L이 붙으면 숫자 크기에 상관없이 long 타입
	 double res = (double) 1 / 2;
	 float num3 = (float) 3.14;//3.14는 접미사가 없기 때문에 double
	 */

	/* 산술선연사자
	 	정수 / 정수 = 정수 (소수점이 버려질 수 있음)★★★
	 	정수 / 실수 = 실수
	 	실수 / 정수 = 실수
	 	실수 / 실수 = 실수
	 */

	/* 문자열 ==로 비교하면 안됨 : 문법적으로는 에러가 발생하지 않지만 두 문자열이 같은지 다를지를 제대로 비교하지 않음
	 * but. str1과 str2에 리터럴 문자열 abc가 저장된 경우는 ==로 판별이 됨
	 * 		str1과 str2가 Scanner를 통해 입력받은 문자열 abc인 경우는 ==로 판별이 안됨
	 * 		str1.equals(str2); => 문자열 비교시에는 equals라는 매서드를 사용해야함
	 */

	/* 논리 연산자 - 항이 boolean 값이어야 하고 결과값도 boolean
	 * && = and 연산자 / 둘다 참이면 참 / 하나라도 거짓이면 거짓
	 * || = or 연산자 / 둘중 하나라도 참이면 참
	 * ! = 반대 연산자 / 참이면 거짓 / 거짓이면 참 ------ 단항 연산자
	 */
	
	/* 조건연산자 - (조건식) ? 참일 때의 값 : 거짓일 때의 값
	 여기서 조건식은 결과값이 참 또는 거짓이 되는 식 ex) 1 > 2 / 1 + 2 는 참과 거짓이 아니기때문에 안됨
	 */
	
	
	/* 조건문
	 * if문과 switch문이 있으며, 거의 대부분의 상황을 if 사용, swich는 특정 상황에서만 사용
	 * if(조건식 - 참 또는 거짓일때의 식)
	 */
	
	
	/* if문 주의사항
	 * 괄호 개수 체크. 열었으면 닫아야함
	 * 괄호를 생략가능(단. 실행문이 1줄인 경우)
	 * else, else if 는 반드시 앞에 if문이 있어야함
	 */
	
	
	/*
	반환타입 함수명(매개변수들){
		구현;
		return 값; // 반환타입이있는경우
	}
		음료수 음료수자판기(int 돈, String 메뉴){
	if(메뉴.equals("사이다")){
		return 사이다;
	}else if(메뉴.equals("콜라")){
		return 콜라;
	return null;
	*/
}
	

